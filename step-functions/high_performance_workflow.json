{
  "Comment": "Robust Book Scan Workflow with Correct Lambda Response Handling",
  "StartAt": "InitializeWorkflow",
  "States": {
    "InitializeWorkflow": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${trigger_pipeline_lambda_arn}",
        "Payload": {
          "s3_bucket.$": "$.input_bucket",
          "s3_prefix.$": "$.input_prefix",
          "temp_bucket.$": "$.temp_bucket",
          "output_bucket.$": "$.output_bucket",
          "run_id.$": "$$.Execution.Name"
        }
      },
      "ResultPath": "$.initialization",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleInitializationFailure",
          "ResultPath": "$.initialization_error"
        }
      ],
      "Next": "CheckInitializationSuccess"
    },
    "CheckInitializationSuccess": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.initialization.StatusCode",
              "NumericEquals": 200
            },
            {
              "Variable": "$.initialization.Payload.status",
              "StringEquals": "SUCCESS"
            }
          ],
          "Next": "ExtractInitializationData"
        }
      ],
      "Default": "HandleInitializationFailure"
    },
    "ExtractInitializationData": {
      "Type": "Pass",
      "Parameters": {
        "run_id.$": "$$.Execution.Name",
        "temp_bucket.$": "$.initialization.Payload.temp_bucket",
        "output_bucket.$": "$.initialization.Payload.output_bucket",
        "image_list.$": "$.initialization.Payload.image_list",
        "cover_files.$": "$.initialization.Payload.cover_files",
        "metadata.$": "$.initialization.Payload"
      },
      "ResultPath": "$.workflow_data",
      "Next": "CopyCoverFiles"
    },
        "HandleInitializationFailure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${handle_failure_lambda_arn}",
        "Payload": {
          "error_type": "InitializationFailure",
          "error_details.$": "$.initialization_error",
          "execution_name.$": "$$.Execution.Name",
          "state_name": "InitializeWorkflow",
          "input_data.$": "$"
        }
      },
      "End": true
    },
    "CopyCoverFiles": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${copy_cover_files_lambda_arn}",
        "Payload": {
          "run_id.$": "$.workflow_data.run_id",
          "input_bucket.$": "$.input_bucket",
          "temp_bucket.$": "$.workflow_data.temp_bucket",
          "cover_files.$": "$.workflow_data.cover_files"
        }
      },
      "ResultPath": "$.cover_copy_result",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleCoverCopyFailure",
          "ResultPath": "$.cover_copy_error"
        }
      ],
      "Next": "ValidateCoverCopySuccess"
    },
    "ValidateCoverCopySuccess": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.cover_copy_result.StatusCode",
          "NumericEquals": 200,
          "Next": "ProcessImages"
        }
      ],
      "Default": "HandleCoverCopyFailure"
    },
    "HandleCoverCopyFailure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${handle_failure_lambda_arn}",
        "Payload": {
          "error_type": "CoverCopyFailure",
          "error_details.$": "$.cover_copy_result",
          "execution_name.$": "$$.Execution.Name",
          "state_name": "CopyCoverFiles"
        }
      },
      "End": true
    },
    "ProcessImages": {
      "Type": "Map",
      "ItemsPath": "$.workflow_data.image_list",
      "MaxConcurrency": 10,
      "Parameters": {
        "run_id.$": "$.workflow_data.run_id",
        "image_key.$": "$$.Map.Item.Value",
        "input_bucket.$": "$.input_bucket",
        "temp_bucket.$": "$.workflow_data.temp_bucket"
      },
      "Iterator": {
        "StartAt": "DetectSkew",
        "States": {
          "DetectSkew": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${detect_skew_lambda_arn}",
              "Payload.$": "$"
            },
            "ResultPath": "$.skew_result",
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "HandleSkewDetectionFailure",
                "ResultPath": "$.skew_error"
              }
            ],
            "Next": "ValidateSkewDetection"
          },
          "ValidateSkewDetection": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.skew_result.StatusCode",
                "NumericEquals": 200,
                "Next": "CorrectSkew"
              }
            ],
            "Default": "HandleSkewDetectionFailure"
          },
          "HandleSkewDetectionFailure": {
            "Type": "Pass",
            "Parameters": {
              "skew_result": {
                "StatusCode": 200,
                "Payload": {
                  "angle": 0.0,
                  "error": "Skew detection failed, using default angle",
                  "status": "FALLBACK"
                }
              }
            },
            "ResultPath": "$.skew_result",
            "Next": "CorrectSkew"
          },
          "CorrectSkew": {
            "Type": "Task",
            "Resource": "arn:aws:states:::ecs:runTask.sync",
            "Parameters": {
              "LaunchType": "FARGATE",
              "Cluster": "${ecs_cluster_arn}",
              "TaskDefinition": "${fargate_task_definition_arn}",
              "NetworkConfiguration": {
                "AwsvpcConfiguration": {
                  "Subnets": ${private_subnets_json},
                  "SecurityGroups": ["${fargate_sg_id}"],
                  "AssignPublicIp": "ENABLED"
                }
              },
              "Overrides": {
                "ContainerOverrides": [
                  {
                    "Name": "consolidated-processor",
                    "Environment": [
                      {"Name": "INPUT_BUCKET", "Value.$": "$.input_bucket"},
                      {"Name": "TEMP_BUCKET", "Value.$": "$.temp_bucket"},
                      {"Name": "RUN_ID", "Value.$": "$.run_id"},
                      {"Name": "IMAGE_KEY", "Value.$": "$.image_key"},
                      {"Name": "SKEW_ANGLE", "Value.$": "$.skew_result.Payload.angle"}
                    ]
                  }
                ]
              }
            },
            "ResultPath": "$.correction_result",
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "HandleCorrectionFailure",
                "ResultPath": "$.correction_error"
              }
            ],
            "Next": "ValidateCorrection"
          },
          "ValidateCorrection": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.correction_result.Tasks[0].LastStatus",
                "StringEquals": "STOPPED",
                "Next": "UpscaleImage"
              }
            ],
            "Default": "HandleCorrectionFailure"
          },
          "HandleCorrectionFailure": {
            "Type": "Pass",
            "Parameters": {
              "correction_result": {
                "status": "SKIPPED",
                "error": "Skew correction failed, proceeding with original image",
                "output_key.$": "$.image_key"
              }
            },
            "ResultPath": "$.correction_result",
            "Next": "UpscaleImage"
          },
          "UpscaleImage": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${upscale_image_lambda_arn}",
              "Payload": {
                "image_key.$": "States.Format('{}', $.correction_result.Tasks[0].Containers[0].ExitCode)",
                "temp_bucket.$": "$.temp_bucket",
                "sagemaker_endpoint_name": "${sagemaker_endpoint_name}"
              }
            },
            "ResultPath": "$.upscale_result",
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "HandleUpscaleFailure",
                "ResultPath": "$.upscale_error"
              }
            ],
            "Next": "ValidateUpscale"
          },
          "ValidateUpscale": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.upscale_result.StatusCode",
                "NumericEquals": 200,
                "Next": "ProcessOcr"
              }
            ],
            "Default": "HandleUpscaleFailure"
          },
          "HandleUpscaleFailure": {
            "Type": "Pass",
            "Parameters": {
              "upscale_result": {
                "StatusCode": 200,
                "Payload": {
                  "status": "SKIPPED",
                  "error": "Upscaling failed, using corrected image",
                  "upscaled_image_key.$": "$.image_key"
                }
              }
            },
            "ResultPath": "$.upscale_result",
            "Next": "ProcessOcr"
          },
          "ProcessOcr": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${process_ocr_lambda_arn}",
              "Payload": {
                "upscaled_image_key.$": "$.upscale_result.Payload.upscaled_image_key",
                "temp_bucket.$": "$.temp_bucket"
              }
            },
            "ResultPath": "$.ocr_result",
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "HandleOcrFailure",
                "ResultPath": "$.ocr_error"
              }
            ],
            "End": true
          },
          "HandleOcrFailure": {
            "Type": "Pass",
            "Parameters": {
              "ocr_result": {
                "StatusCode": 200,
                "Payload": {
                  "status": "FAILED",
                  "error": "OCR processing failed",
                  "text": "",
                  "confidence": 0
                }
              }
            },
            "ResultPath": "$.ocr_result",
            "End": true
          }
        }
      },
      "ResultPath": "$.processing_results",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleProcessingFailure",
          "ResultPath": "$.processing_error"
        }
      ],
      "Next": "GeneratePdf"
    },
    "HandleProcessingFailure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${handle_failure_lambda_arn}",
        "Payload": {
          "error_type": "ImageProcessingFailure",
          "error_details.$": "$.processing_error",
          "execution_name.$": "$$.Execution.Name",
          "state_name": "ProcessImages"
        }
      },
      "Next": "GeneratePdf"
    },
    "GeneratePdf": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${generate_pdf_lambda_arn}",
        "Payload": {
          "run_id.$": "$.workflow_data.run_id",
          "processing_results.$": "$.processing_results",
          "cover_copy_result.$": "$.cover_copy_result",
          "temp_bucket.$": "$.workflow_data.temp_bucket",
          "output_bucket.$": "$.workflow_data.output_bucket"
        }
      },
      "ResultPath": "$.pdf_result",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandlePdfGenerationFailure",
          "ResultPath": "$.pdf_error"
        }
      ],
      "Next": "ValidatePdfGeneration"
    },
    "ValidatePdfGeneration": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.pdf_result.StatusCode",
          "NumericEquals": 200,
          "Next": "GenerateSummary"
        }
      ],
      "Default": "HandlePdfGenerationFailure"
    },
    "HandlePdfGenerationFailure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${handle_failure_lambda_arn}",
        "Payload": {
          "error_type": "PdfGenerationFailure",
          "error_details.$": "$.pdf_error",
          "execution_name.$": "$$.Execution.Name",
          "state_name": "GeneratePdf"
        }
      },
      "Next": "GenerateSummary"
    },
    "GenerateSummary": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${generate_run_summary_lambda_arn}",
        "Payload": {
          "execution_name.$": "$$.Execution.Name",
          "start_time.$": "$$.Execution.StartTime",
          "initialization.$": "$.initialization",
          "processing_results.$": "$.processing_results",
          "pdf_result.$": "$.pdf_result"
        }
      },
      "ResultPath": "$.summary_result",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "FinalCleanup",
          "ResultPath": "$.summary_error"
        }
      ],
      "Next": "FinalCleanup"
    },
    "FinalCleanup": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${final_cleanup_lambda_arn}",
        "Payload": {
          "temp_bucket.$": "$.workflow_data.temp_bucket",
          "run_id.$": "$.workflow_data.run_id",
          "cluster_name": "${ecs_cluster_arn}",
          "sagemaker_endpoint": "${sagemaker_endpoint_name}"
        }
      },
      "ResultPath": null,
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "SuccessState",
          "ResultPath": "$.cleanup_error"
        }
      ],
      "Next": "SuccessState"
    },
    "SuccessState": {
      "Type": "Succeed"
    }
  }
}